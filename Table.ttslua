require("ArkNova.Constants")
require("ArkNova.Helpers")

local DEBUG = true

function onLoad(script_state)
  for _,color in ipairs(ALL_COLORS) do
    local b = getObjectFromGUID(PIECES[color]["border"])
    b.interactable = false
    b.locked = true
    b.setScale({19, 10, 32})

    local anchor = getObjectFromGUID(ANCHORS[color])
    anchor.call("initAnchor", {color = color})

    b.setPosition(anchor.getPosition() + vector(0, 0, -30))
  end

  local state = JSON.decode(script_state)
  gameStarted = state["gameStarted"]

  Global.setVar("white_active", state["white_active"])
  Global.setVar("yellow_active", state["yelow_active"])
  Global.setVar("red_active", state["red_active"])
  Global.setVar("blue_active", state["blue_active"])

  self.UI.setAttribute("setupBtn", "active", not gameStarted)
end

function onSave()
  -- local state = {
  --   gameStarted = gameStarted,
  --   white_active = Global.getVar("white_active"),
  --   yellow_active = Global.getVar("yellow_active"),
  --   red_active = Global.getVar("red_active"),
  --   blue_active = Global.getVar("blue_active"),
  -- }
  -- local state_str = JSON.encode(state)
  -- return state_str
end

function setup()
  log("Setup button clicked")
  self.UI.setAttribute("setupBtn", "active", false)
  ready_players = {}

  if DEBUG then
    for _,color in ipairs(ALL_COLORS) do
      log("Now processing " .. color)
      local anchor = getObjectFromGUID(ANCHORS[color])
      anchor.call("handleSetup", {color = color})
    end
  else
    local players = Player.getPlayers()
    for _, player in ipairs(players) do
      local color = toLowerCase(player.color)
      log("Now processing " .. color)
      local anchor = getObjectFromGUID(ANCHORS[color])
      anchor.call("initAnchor", {color = color})
      anchor.call("handleSetup", {color = color})
    end
  end

end

function readyPlayer(params)
  local color = params["color"]
  local ready = params["ready"]

  if ready then
    ready_players = table.insert(ready_players, color)
  else
    ready_players = removeItem(ready_players, color)
  end

  if DEBUG and #ready_players == 4 then
    log("All "..#ready_players.." players are ready!")
    broadcastToAll("All " .. #ready_players .. " players are ready!")
    self.UI.setAttribute("allReadyBtn", "active", true)
  elseif not DEBUG and #ready_players == #getSeatedPlayers() then
    log("All "..#ready_players.." players are ready!")
    broadcastToAll("All " .. #ready_players .. " players are ready!")
    self.UI.setAttribute("allReadyBtn", "active", true)
  else
    self.UI.setAttribute("allReadyBtn", "active", false)
  end
end

function gameInit()
  self.UI.setAttribute("allReadyBtn", "active", false)
  gameStarted = true

  if DEBUG then
    for _,color in ipairs(ALL_COLORS) do
      local c = toLowerCase(color)
      Global.setVar(c.."_active", true)
      local anchor = getObjectFromGUID(ANCHORS[c])
      anchor.call("gameInit", {color = c})
    end

    local i = math.random(0, #ALL_COLORS)
    local firstPlayer = ALL_COLORS[i]
    broadcastToAll(firstPlayer.." will go first!")

    Turns.enable = true
    Turns.type = 1
    Turns.order = getTurnOrder(ALL_COLORS, i)
  else
    for _,color in ipairs(getSeatedPlayers()) do
      local c = toLowerCase(color)
      Global.setVar(c.."_active", true)
      local anchor = getObjectFromGUID(ANCHORS[c])
      anchor.call("gameInit", {color = c})
    end

    local i = math.random(0, #getSeatedPlayers())
    local firstPlayer = getSeatedPlayers()[i]
    broadcastToAll(firstPlayer.." will go first!")

    Turns.enable = true
    Turns.type = 1
    Turns.order = getTurnOrder(getSeatedPlayers(), i)
  end

  local mainBoard = getObjectFromGUID(MAIN_BOARD)
  mainBoard.call("initBoard", {turnOrder = Turns.order})
end

function getTurnOrder(players, startIndex)
  local turnOrder = {}
  local turnIndex = 1
  for i = startIndex, #players, 1 do
    turnOrder[turnIndex] = players[i]
    turnIndex = turnIndex + 1
  end
  for i = 1, startIndex - 1, 1 do
    turnOrder[turnIndex] = players[i]
    turnIndex = turnIndex + 1
  end
  return turnOrder
end
