require("ArkNova.Constants")
require("ArkNova.Helpers")

local DEBUG = true
local break_token = getObjectFromGUID(BREAK_TOKEN)

local state = {
  gameStarted = false,
  activeColors = {},
  turnIndex = 0,
  turnOrder = {}
}

function onLoad(save)
  if #save > 0 then
    local s = JSON.decode(save)
    if s["gameStarted"] then
      state = s
    end
  end

  ready_players = {}

  self.UI.setAttribute("setupBtn", "active", state["gameStarted"] == false)

  if state["gameStarted"] then
    broadcastToAll("Welcome back! It's now "..state["turnOrder"][state["turnIndex"]].."'s turn.")

    Turns.enable = true
    Turns.type = 1
    Turns.order = state["turnOrder"]
    Turns.turn_color = state["turnOrder"][state["turnIndex"]]
  end
end

function onSave()
  return JSON.encode(state)
end

function setup()
  log("Setup button clicked")
  self.UI.setAttribute("setupBtn", "active", false)
  ready_players = {}

  if DEBUG then
    for _,color in ipairs(ALL_COLORS) do
      local anchor = getObjectFromGUID(ANCHORS[color])
      anchor.call("setupAnchor")
    end
  else
    local players = Player.getPlayers()
    for _, player in ipairs(players) do
      local color = toLowerCase(player.color)
      local anchor = getObjectFromGUID(ANCHORS[color])

      anchor.call("setupAnchor")
    end
  end
end

function readyPlayer(params)
  local color = params["color"]
  local ready = params["ready"]

  if ready then
    ready_players = table.insert(ready_players, color)
  else
    ready_players = removeItem(ready_players, color)
  end

  if DEBUG and #ready_players == 4 then
    log("All "..#ready_players.." players are ready!")
    broadcastToAll("All " .. #ready_players .. " players are ready!")
    self.UI.setAttribute("allReadyBtn", "active", true)
  elseif not DEBUG and #ready_players == #getSeatedPlayers() then
    log("All "..#ready_players.." players are ready!")
    broadcastToAll("All " .. #ready_players .. " players are ready!")
    self.UI.setAttribute("allReadyBtn", "active", true)
  else
    self.UI.setAttribute("allReadyBtn", "active", false)
  end
end

function gameInit()
  self.UI.setAttributes("allReadyBtn", { active = false })
  state["gameStarted"] = true
  self.UI.setAttributes("moveBreakTokenBtn", { active = true })
  local activeColors = {}

  if DEBUG then
    for _,color in ipairs(ALL_COLORS) do
      local c = string.lower(color)
      table.insert(activeColors, c)

      local anchor = getObjectFromGUID(ANCHORS[c])
      anchor.call("gameInit", {color = c})
    end

    local i = math.random(1, #ALL_COLORS)
    local firstPlayer = ALL_COLORS[i]
    broadcastToAll(capitalize(firstPlayer).." will go first!")

    Turns.order = getTurnOrder(ALL_COLORS, i)
  else
    for _,color in ipairs(getSeatedPlayers()) do
      local c = string.lower(color)
      table.insert(activeColors, c)

      local anchor = getObjectFromGUID(ANCHORS[c])
      anchor.call("gameInit", {color = c})
    end

    local i = math.random(1, #getSeatedPlayers())
    local firstPlayer = getSeatedPlayers()[i]
    broadcastToAll(capitalize(firstPlayer).." will go first!")

    Turns.order = getTurnOrder(getSeatedPlayers(), i)
  end

  state["activeColors"] = activeColors
  state["turnIndex"] = 1
  state["turnOrder"] = Turns.order
  Turns.enable = true
  Turns.type = 1

  for _,c in ipairs(Turns.order) do
    local agent1 = getObjectFromGUID(PIECES[c]["agent1"])
    local agent2 = getObjectFromGUID(PIECES[c]["agent2"])
    local agent3 = getObjectFromGUID(PIECES[c]["agent3"])
    local agent4 = getObjectFromGUID(PIECES[c]["agent4"])

    local appeal_token = getObjectFromGUID(PIECES[c]["appeal_token"])
    local conservation_token = getObjectFromGUID(PIECES[c]["conservation_token"])
    local rep_token = getObjectFromGUID(PIECES[c]["rep_token"])

    local anchor = getObjectFromGUID(ANCHORS[c])

    Wait.frames(function()
      agent1.setPositionSmooth(anchor.getPosition() + vector(-13, 2.2, -38), false, false)
      agent1.setRotation({0, 0, 0})

      agent2.setPositionSmooth(anchor.getPosition() + vector(-15.6, 2.2, -28.5), false, false)
      agent2.setRotation({90, 0, 180})

      agent3.setPositionSmooth(anchor.getPosition() + vector(-15.6, 2.2, -31), false, false)
      agent3.setRotation({90, 0, 180})

      agent4.setPositionSmooth(anchor.getPosition() + vector(-15.6, 2.2, -33.3), false, false)
      agent4.setRotation({90, 0, 180})
    end, 280)


  end

  local mainBoard = getObjectFromGUID(MAIN_BOARD)
  mainBoard.call("initBoard", {turnOrder = Turns.order})
end

function getTurnOrder(players, startIndex)
  local turnOrder = {}
  local turnIndex = 1
  for i = startIndex, #players, 1 do
    turnOrder[turnIndex] = players[i]
    turnIndex = turnIndex + 1
  end
  for i = 1, startIndex - 1, 1 do
    turnOrder[turnIndex] = players[i]
    turnIndex = turnIndex + 1
  end
  return turnOrder
end

function onMoveBreakTokenClick()
  break_token.call("moveToken")
end

function onPlayerTurnStart(player_color_start, player_color_previous)
  local idx = 1

  for i,color in ipairs(Turns.order) do
    if string.lower(color) == string.lower(player_color_start) then
      idx = i
      break
    end
  end
  state["turnIndex"] = idx
end
