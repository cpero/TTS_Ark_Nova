require("ArkNova.Constants")
require("ArkNova.Helpers")

local DEBUG = false
local breakToken = getObjectFromGUID(BREAK_TOKEN)

local state = {
  gameStarted = false,
  gameSetup = false,
  flipDisplayClicked = true,
  activeColors = {},
  turnIndex = 0,
  turnOrder = {},
  readyPlayers = {}
}

function onLoad(save)
  if #save > 0 then
    local s = JSON.decode(save)
    if s["gameSetup"] then
      state = s

      for i,c in ipairs(state["activeColors"]) do
        local anchor = getObjectFromGUID(ANCHORS[c])

        anchor.call("initAnchor")
      end

      if #state["readyPlayers"] == #state["activePlayers"] then
        broadcastToAll("All " .. #state["activePlayers"] .. " players are ready!")
        self.UI.setAttribute("allReadyBtn", "active", true)
      end
    elseif s["gameStarted"] then
      state = s

      broadcastToAll("Welcome back! It's now "..state["turnOrder"][state["turnIndex"]].."'s turn.")

      Turns.enable = true
      Turns.type = 1
      Turns.order = state["turnOrder"]
      Turns.turn_color = state["turnOrder"][state["turnIndex"]]

      self.UI.setAttribute("setupBtn", "active", false)

      if #s["activeColors"] > 1 then
        self.UI.setAttributes("moveBreakTokenBtn", { active = true })
      end

      if state["flipDisplayClicked"] then
        self.UI.setAttributes("refillDisplayBtn", {active = true})
        self.UI.setAttributes("flipDisplay", {active = false})
      else
        self.UI.setAttributes("flipDisplay", {active = true})
        self.UI.setAttributes("refillDisplayBtn", {active = false})
      end
    else
      self.UI.setAttribute("setupBtn", "active", true)
    end
  else
    self.UI.setAttribute("setupBtn", "active", true)
  end
end

function onSave()
  return JSON.encode(state)
end

function onClickSetupBtn()
  self.UI.setAttribute("setupBtn", "active", false)
  state["readyPlayers"] = {}
  state["gameSetup"] = true

  if DEBUG then
    for _,color in ipairs(ALL_COLORS) do
      log(color)
      local anchor = getObjectFromGUID(ANCHORS[color])
      state["activeColors"] = table.insert(state["activeColors"], color)
      anchor.call("initAnchor")
    end
  else
    local players = getSeatedPlayers()
    for _,c in ipairs(players) do
      local color = string.lower(c)
      state["activeColors"] = table.insert(state["activeColors"], color)
      local anchor = getObjectFromGUID(ANCHORS[color])

      anchor.call("initAnchor")
    end
  end
end

function readyPlayer(params)
  local color = params["color"]
  local ready = params["ready"]

  if ready then
    state["readyPlayers"] = table.insert(state["readyPlayers"], color)
  else
    state["readyPlayers"] = removeItem(state["readyPlayers"], color)
  end

  if #state["readyPlayers"] == #state["activeColors"] then
    broadcastToAll("All " .. #state["activeColors"] .. " players are ready!")
    self.UI.setAttribute("allReadyBtn", "active", true)
  else
    self.UI.setAttribute("allReadyBtn", "active", false)
  end
end

function gameInit()
  self.UI.setAttributes("allReadyBtn", { active = false })
  state["gameStarted"] = true
  state["gameSetup"] = false

  if #state["activeColors"] > 1 then
    self.UI.setAttributes("moveBreakTokenBtn", { active = true })
  end

  for _,color in ipairs(state["activeColors"]) do
    local anchor = getObjectFromGUID(ANCHORS[color])
    anchor.call("gameInit", {color = color})
  end

  local i = math.random(1, #state["activeColors"])
  local firstPlayer = state["activeColors"][i]
  broadcastToAll(capitalize(firstPlayer).." will go first!")

  Turns.order = getTurnOrder(state["activeColors"], i)

  state["turnIndex"] = 1
  state["turnOrder"] = Turns.order
  Turns.enable = true
  Turns.type = 1

  for i,c in ipairs(Turns.order) do

    local agent1 = getObjectFromGUID(PIECES[c]["agent1"])
    local agent2 = getObjectFromGUID(PIECES[c]["agent2"])
    local agent3 = getObjectFromGUID(PIECES[c]["agent3"])
    local agent4 = getObjectFromGUID(PIECES[c]["agent4"])

    local anchor = getObjectFromGUID(ANCHORS[c])

    Wait.frames(function()
      agent1.setPositionSmooth(anchor.getPosition() + vector(-13, 2.2, -38), false, false)
      agent1.setRotation({0, 0, 0})

      agent2.setPositionSmooth(anchor.getPosition() + vector(-15.6, 2.2, -28.5), false, false)
      agent2.setRotation({90, 0, 180})

      agent3.setPositionSmooth(anchor.getPosition() + vector(-15.6, 2.2, -31), false, false)
      agent3.setRotation({90, 0, 180})

      agent4.setPositionSmooth(anchor.getPosition() + vector(-15.6, 2.2, -33.3), false, false)
      agent4.setRotation({90, 0, 180})
    end, 280)
  end

  Notes.setNotes("")
  local mainBoard = getObjectFromGUID(MAIN_BOARD)
  mainBoard.call("initBoard", {turnOrder = Turns.order})
  state["flipDisplayClicked"] = false
  self.UI.setAttributes("flipDisplay", {active = true})
end

function getTurnOrder(players, startIndex)
  local turnOrder = {}
  local turnIndex = 1
  for i = startIndex, #players, 1 do
    turnOrder[turnIndex] = string.lower(players[i])
    turnIndex = turnIndex + 1
  end
  for i = 1, startIndex - 1, 1 do
    turnOrder[turnIndex] = string.lower(players[i])
    turnIndex = turnIndex + 1
  end
  return turnOrder
end

function onMoveBreakTokenClick()
  breakToken.call("moveToken")
end

function onPlayerTurnStart(player_color_start, player_color_previous)
  local idx = 1

  for i,color in ipairs(Turns.order) do
    if string.lower(color) == string.lower(player_color_start) then
      idx = i
      break
    end
  end
  state["turnIndex"] = idx
end

function flipDisplay()
  local mainBoard = getObjectFromGUID(MAIN_BOARD)
  mainBoard.call("flipDisplay")
  state["flipDisplayClicked"] = true
  self.UI.setAttributes("flipDisplay", {active = false})
  self.UI.setAttributes("refillDisplayBtn", {active = true})
end

function onRefillDisplayClick()
  local mainBoard = getObjectFromGUID(MAIN_BOARD)
  mainBoard.call("refillDisplay")
end
