require("ArkNova.Constants")
require("ArkNova.Helpers")

local DEBUG = true

local APPEAL_TRACK_POS = {
  {41.6, 1, 10},
  {40, 1, 10},
  {38, 1, 10},
  {36, 1, 10}
}

local CONSERVATION_TRACK_X_POS = {

}

local state = {
  game_started = false,
  numPlayers = 0,
  color = "",
  turnOrder = {},
  appeal = {
    white = 0,
    yellow = 0,
    red = 0,
    blue = 0
  },
  conservation = {
    white = 0,
    yellow = 0,
    red = 0,
    blue = 0
  },
  rep = {
    white = 0,
    yellow = 0,
    red = 0,
    blue = 0
  },
  university_guids = {},
  partnership_guids = {},
  card_guids = {}
}

local debounceCardZones = false

function initBoard(params)
  local turnOrder = params["turnOrder"]
  local mainBoard = getObjectFromGUID(MAIN_BOARD)

  state["numPlayers"] = #turnOrder
  state["turnOrder"] = turnOrder
  state["color"] = params["color"]

  for i,c in ipairs(turnOrder) do

    local appeal_token = getObjectFromGUID(PIECES[c]["appeal_token"])
    local conservation_token = getObjectFromGUID(PIECES[c]["conservation_token"])
    local rep_token = getObjectFromGUID(PIECES[c]["rep_token"])

    appeal_token.setPositionSmooth(getAppealPosition(i), false, false)
    state["appeal"][c] = i - 1

    conservation_token.setPositionSmooth(mainBoard.getPosition() + vector(44, 1, -13+(i*1.25)), false, false)
    rep_token.setPositionSmooth(mainBoard.getPosition() + vector(27+(i*1.5), 1, -3), false, false)
  end

  local breakToken = getObjectFromGUID(BREAK_TOKEN)
  breakToken.call("initBreakToken", {numPlayers = state["numPlayers"]})

  local conservationTokenBag = getObjectFromGUID(CONSERVATION_TOKEN_BAG)
  conservationTokenBag.shuffle()
  conservationTokenBag.takeObject({
    position = self.getPosition() + vector(30, 1, -6.2),
    rotation = {0, 0, 0}
  })

  conservationTokenBag.takeObject({
    position = self.getPosition() + vector(26.5, 1, -6.2),
    rotation = {0, 0, 0}
  })

  conservationTokenBag.takeObject({
    position = self.getPosition() + vector(20.2, 1, -6.2),
    rotation = {0, 0, 0}
  })
  conservationTokenBag.takeObject({
    position = self.getPosition() + vector(16.8, 1, -6.2),
    rotation = {0, 0, 0}
  })

  local associationBoard = getObjectFromGUID(ASSOCIATION_BOARD)

  local university1 = getObjectFromGUID(UNIVERSITIES[1])
  local university2 = getObjectFromGUID(UNIVERSITIES[2])
  local university3 = getObjectFromGUID(UNIVERSITIES[3])

  u1 = university1.takeObject({
    position = associationBoard.getPosition() + vector(-7.3, 1, -1.53),
    rotation = {0, 0, 0}
  })

  u2 = university2.takeObject({
    position = associationBoard.getPosition() + vector(-5.1, 1, 1.25),
    rotation = {0, 0, 0}
  })

  u3 = university2.takeObject({
    position = associationBoard.getPosition() + vector(-8.4, 1, 1.25),
    rotation = {0, 0, 0}
  })

  state["university_guids"] = {u1.getGUID(), u2.getGUID(), u3.getGUID()}

  local partnership1 = getObjectFromGUID(PARTNERSHIPS[1])
  local partnership2 = getObjectFromGUID(PARTNERSHIPS[2])
  local partnership3 = getObjectFromGUID(PARTNERSHIPS[3])
  local partnership4 = getObjectFromGUID(PARTNERSHIPS[4])
  local partnership5 = getObjectFromGUID(PARTNERSHIPS[5])

  p1 = partnership1.takeObject({
    position = associationBoard.getPosition() + vector(4.15, 1, -.5),
    rotation = {0, 0, 0}
  })

  p2 = partnership2.takeObject({
    position = associationBoard.getPosition() + vector(1.4, 1, 1.15),
    rotation = {0, 0, 0}
  })

  p3 = partnership3.takeObject({
    position = associationBoard.getPosition() + vector(-1.75, 1, 1.15),
    rotation = {0, 0, 0}
  })

  p4 = partnership4.takeObject({
    position = associationBoard.getPosition() + vector(-1.75, 1, -1.7),
    rotation = {0, 0, 0}
  })

  p5 = partnership5.takeObject({
    position = associationBoard.getPosition() + vector(1.4, 1, -1.7),
    rotation = {0, 0, 0}
  })

  state["partnership_guids"] = {p1.getGUID(), p2.getGUID(), p3.getGUID(), p4.getGUID(), p5.getGUID()}

  local conservationDeck = getObjectFromGUID(CONSERVATION_DECK)
  conservationDeck.shuffle()

  conservationDeck.takeObject({
    position = associationBoard.getPosition() + vector(9.3, 1, 10.5),
    rotation = {0, 0, 0}
  })

  conservationDeck.takeObject({
    position = associationBoard.getPosition() + vector(3, 1, 10.5),
    rotation = {0, 0, 0}
  })

  conservationDeck.takeObject({
    position = associationBoard.getPosition() + vector(-3.15, 1, 10.5),
    rotation = {0, 0, 0}
  })

  if #state["turnOrder"] == 4 then
    conservationDeck.takeObject({
      position = associationBoard.getPosition() + vector(-9.3, 1, 10.5),
      rotation = {0, 0, 0}
    })
  end

  local extraMarkers = getObjectFromGUID(EXTRA_MARKERS)

  if #state["turnOrder"] == 2 or DEBUG then
    e1 = extraMarkers.takeObject({
      position = associationBoard.getPosition() + vector(11.15, 1, 13.2),
      rotation = {0, 0, 0}
    })

    e2 = extraMarkers.takeObject({
      position = associationBoard.getPosition() + vector(2.95, 1, 13.2),
      rotation = {0, 0, 0}
    })

    e3 = extraMarkers.takeObject({
      position = associationBoard.getPosition() + vector(-5.15, 1, 13.2),
      rotation = {0, 0, 0}
    })
  end

  extraMarkers.destroy()

  local card_guids = {}
  local projectDeck = getObjectFromGUID(PROJECT_DECK)
  projectDeck.shuffle()
  for i,z in ipairs(BOARD_CARD_ZONES) do
    local zone = getObjectFromGUID(z)
    local card = projectDeck.takeObject({
      position = zone.getPosition(),
      rotation = {0, 0, 180}
    })

    table.insert(card_guids, card.getGUID())
  end

  state["card_guids"] = card_guids

  local objectiveDeck = getObjectFromGUID(OBJECTIVE_DECK)

  for _,c in ipairs(state["turnOrder"]) do
    local playerZone = getObjectFromGUID(PIECES[c]["zone"])

    for i=1, 8 do
      local z = projectDeck.takeObject({
        position = playerZone.getPosition(),
        rotation = {0, 0, 180}
      })
      playerZone.putObject(z)

      if i < 3 then
        local y = objectiveDeck.takeObject({
          position = playerZone.getPosition(),
          rotation = {0, 0, 180}
        })

      end

      Wait.frames(function()
        z.flip()
      end, 200)
    end
    for i=1, 2 do

    end
  end

  Wait.frames(function()
    state["game_started"] = true
  end, 360)
end

function onObjectLeaveScriptingZone(zone, enter_object)
  if state["numPlayers"] > 0 and state["game_started"] then
    local name = zone.getName()
    local card_zone = string.find(name, "Card Zone")
    local partnership_zone = string.find(name, "Partnership Zone")
    local university_zone = string.find(name, "University Zone")

    if debounceCardZones == false and card_zone ~= nil and card_zone > 0 then
      local str = string.gsub(name, "Card Zone ", "", 1)
      local zone_idx = tonumber(str)
      state["card_guids"][zone_idx] = ""
    elseif partnership_zone ~= nil and partnership_zone > 0 then
        local str = string.gsub(name, "Partnership Zone ", "", 1)
        local zone_idx = tonumber(str)
        state["partnership_guids"][zone_idx] = ""
    elseif university_zone ~= nil and university_zone > 0 then
      local str = string.gsub(name, "University Zone ", "", 1)
      local zone_idx = tonumber(str)
      state["university_guids"][zone_idx] = ""
    end
  end
end

function onSave()
  return JSON.encode(state)
end

function onLoad(save)
  if #save > 0 then
    local s = JSON.decode(save)
    if s["numPlayers"] > 0 then
      state = s
    end
  end
end

function flipDisplay()
  for _,c in ipairs(state["card_guids"]) do
    local card = getObjectFromGUID(c)
    card.flip()
  end
end

function refillDisplay()
  if debounceCardZones then
    return
  end

  local new_order = {"", "", "", "", "", ""}
  local project_deck = getObjectFromGUID(PROJECT_DECK)
  debounceCardZones = true

  local order_idx = 1
  for i, c in ipairs(state["card_guids"]) do
    if c ~= "" then
      new_order[order_idx] = c
      order_idx = order_idx + 1
    end
  end

  for i,c in ipairs(new_order) do
    local zone = getObjectFromGUID(BOARD_CARD_ZONES[i])
    if c == "" then
      local card = project_deck.takeObject({
         position = zone.getPosition(),
         rotation = {0, 0, 0}
       })
       new_order[i] = card.getGUID()
     else
       local card = getObjectFromGUID(c)
       card.setPositionSmooth(zone.getPosition(), false, true)
       card.setRotation({0, 0, 0})
    end
  end

  Wait.frames(function ()
    debounceCardZones = false
    state["card_guids"] = new_order
  end, 60)
end

function onPlayerTurnEnd(player_color_end, player_color_next)
  if state["numPlayers"] > 0 and state["game_started"] and debounceCardZones == false then
    refillDisplay()
  end
end

function breakTime()
  local mainBoard = getObjectFromGUID(MAIN_BOARD)
  local associationBoard = getObjectFromGUID(ASSOCIATION_BOARD)
  local university1 = getObjectFromGUID(UNIVERSITIES[1])
  local university2 = getObjectFromGUID(UNIVERSITIES[2])
  local university3 = getObjectFromGUID(UNIVERSITIES[3])
  local partnership1 = getObjectFromGUID(PARTNERSHIPS[1])
  local partnership2 = getObjectFromGUID(PARTNERSHIPS[2])
  local partnership3 = getObjectFromGUID(PARTNERSHIPS[3])
  local partnership4 = getObjectFromGUID(PARTNERSHIPS[4])
  local partnership5 = getObjectFromGUID(PARTNERSHIPS[5])

  local card1 = getObjectFromGUID(state["card_guids"][1])
  card1.setPositionSmooth(mainBoard.getPosition() + vector(40.5, 1, 2.4), false, false)

  local card2 = getObjectFromGUID(state["card_guids"][2])
  card2.setPositionSmooth(mainBoard.getPosition() + vector(40.5, 1, 2.4), false, false)

  Wait.frames(function()
    refillDisplay()
    foghorn("Don't forget to discard to hand size, discard tokens, and collect money!", {r=1,g=0,b=0})
  end
  , 240)


  for i,id in ipairs(state["partnership_guids"]) do
    if id == "" then
      if i == 1 then
        p1 = partnership1.takeObject({
          position = associationBoard.getPosition() + vector(4.15, 1, -.5),
          rotation = {0, 0, 0}
        })
      elseif i == 2 then
        p2 = partnership2.takeObject({
          position = associationBoard.getPosition() + vector(1.4, 1, 1.15),
          rotation = {0, 0, 0}
        })
      elseif i == 3 then
        p3 = partnership3.takeObject({
          position = associationBoard.getPosition() + vector(-1.75, 1, 1.15),
          rotation = {0, 0, 0}
        })
      elseif i == 4 then
        p4 = partnership4.takeObject({
          position = associationBoard.getPosition() + vector(-1.75, 1, -1.7),
          rotation = {0, 0, 0}
        })
      elseif i == 5 then
        p5 = partnership5.takeObject({
          position = associationBoard.getPoawition() + vector(1.4, 1, -1.7),
          rotation = {0, 0, 0}
        })
      end
    end
  end
  for i,id in ipairs(state["university_guids"]) do
    if id == "" then
      if i == 1 then
        u1 = university1.takeObject({
          position = associationBoard.getPosition() + vector(-7.3, 1, -1.53),
          rotation = {0, 0, 0}
        })
      elseif i == 2 then
        u2 = university2.takeObject({
          position = associationBoard.getPosition() + vector(-5.1, 1, 1.25),
          rotation = {0, 0, 0}
        })
      elseif i == 3 then
        u3 = university2.takeObject({
          position = associationBoard.getPosition() + vector(-8.4, 1, 1.25),
          rotation = {0, 0, 0}
        })
      end
    end
  end
end

function getAppealPosition(index)
  local mainBoard = getObjectFromGUID(MAIN_BOARD)
  local APPEAL_POS = {
    40.3,
    38.6,
    37,
    35.45,
    33.9,
    32.15, -- 5
    30.5,
    28.95,
    27.3,
    25.7,
    24.1, -- 10
    22.4,
    20.9,
    19.3,
    17.6,
    16, -- 15
    14.5,
    12.9,
    11.25,
    9.65,
    8, -- 20
    6.4,
    4.8,
    3.2,
    1.6,
    0, -- 25
    -1.65,
    -3.3,
    -4.95,
    -6.5,
    -8.1, -- 30
    -9.7,
    -11.35,
    -12.95,
    -14.6,
    -16.25, -- 35
    -17.85,
    -19.4,
    -21.05,
    -22.7,
    -24.25, -- 40
    -25.85,
    -27.5,
    -29.2,
    -30.8,
    -32.45, -- 45
    -33.95,
    -35.55,
    -37.2,
    -38.75,
    -40.4, -- 50
    -42,
    6.3,
    4.8,
    3.2,
    1.5, -- 55
    0,
    -1.55,
    -3.2,
    -4.9,
    -6.35, -- 60
    -42,
    -40.4,
    -38.75,
    -37.2,
    -35.55, -- 65
    -33.95,
    -32.45,
    -30.8,
    -29.2,
    -27.5, -- 70
    -25.85,
    -24.25,
    -22.7,
    -21.05,
    -19.4, -- 75
    -17.85,
    -16.25,
    -14.6,
    -12.95,
    -11.35, -- 80
    -9.7,
    -8.1,
    -6.5,
    -4.95,
    -3.3, -- 85
    -1.65,
    0,
    1.6,
    3.2,
    4.8, -- 90
    6.4,
    8,
    9.65,
    11.25,
    12.9, -- 95
    14.5,
    16,
    17.6,
    19.3,
    20.9, -- 100
    22.4,
    24.1,
    25.7,
    27.3,
    28.95, -- 105
    30.5,
    32.15,
    33.9,
    35.45,
    37, -- 110
    38.6,
    40.3,
    41.9
  }

  if index < 53 then
    return mainBoard.getPosition() + vector(APPEAL_POS[index], 1, 10)
  elseif index < 61 then
    return mainBoard.getPosition() + vector(-43, 1, APPEAL_POS[index])
  elseif index == 61 then
    return mainBoard.getPosition() + vector(-43, 2, APPEAL_POS[index])
  elseif index < 115 then
    return mainBoard.getPosition() + vector(APPEAL_POS[index], 1, -10)
  end
end
