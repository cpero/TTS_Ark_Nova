require("ArkNova.Constants")
require("ArkNova.Helpers")

local DEBUG = false

local state = {
  gameStarted = false,
  numPlayers = 0,
  turnOrder = {},
  appeal = {
    guids = {
      white = "",
      yellow = "",
      red = "",
      blue = ""
    },
    white = -1,
    yellow = -1,
    red = -1,
    blue = -1
  },
  conservation = {
    guids = {
      white = "",
      yellow = "",
      red = "",
      blue = ""
    },
    white = -1,
    yellow = -1,
    red = -1,
    blue = -1
  },
  reputation = {
    guids = {
      white = "",
      yellow = "",
      red = "",
      blue = ""
    },
    white = -1,
    yellow = -1,
    red = -1,
    blue = -1
  },
  universityGUIDs = {},
  partnershipGUIDs = {},
  cardGUIDs = {},
  soloMarkers = {}
}

local debounceCardZones = false

function initBoard(params)
  local turnOrder = params["turnOrder"]
  local mainBoard = getObjectFromGUID(MAIN_BOARD)

  state["numPlayers"] = #turnOrder
  state["turnOrder"] = turnOrder

  for i,c in ipairs(turnOrder) do

    local appeal_token = getObjectFromGUID(PIECES[c]["appeal_token"])
    local conservation_token = getObjectFromGUID(PIECES[c]["conservation_token"])
    local rep_token = getObjectFromGUID(PIECES[c]["rep_token"])

    state["appeal"]["guids"][c] = appeal_token.guid
    appeal_token.setPositionSmooth(getAppealPosition(c, i, true), false, false)
    appeal_token.interactable = false
    appeal_token.locked = true

    state["conservation"]["guids"][c] = conservation_token.guid
    conservation_token.setPositionSmooth(getConservationPosition(c, 0, true), false, false)
    conservation_token.interactable = false
    conservation_token.locked = true

    state["reputation"]["guids"][c] = rep_token.guid
    rep_token.setPositionSmooth(getReputationPosition(c, 1, true), false, false)
    rep_token.interactable = false
    rep_token.locked = true
  end

  local breakToken = getObjectFromGUID(BREAK_TOKEN)
  local associationBoard = getObjectFromGUID(ASSOCIATION_BOARD)

  if #turnOrder == 1 then
    local soloCard = getObjectFromGUID(SOLO_CARD)
    soloCard.setPosition(associationBoard.getPosition() + vector(17, 1, 7))
    soloCard.locked = true
    soloCard.interactable = false
    local soloColor = string.lower(getSeatedPlayers()[1])
    local appeal_token = getObjectFromGUID(PIECES[soloColor]["appeal_token"])
    appeal_token.setPositionSmooth(getAppealPosition(soloColor, 20, true), false, false)
  else
    breakToken.call("initBreakToken", {numPlayers = #turnOrder})
  end


  local conservationTokenBag = getObjectFromGUID(CONSERVATION_TOKEN_BAG)
  conservationTokenBag.shuffle()
  conservationTokenBag.takeObject({
    position = self.getPosition() + vector(30, 1, -6.2),
    rotation = {0, 0, 0}
  })

  conservationTokenBag.takeObject({
    position = self.getPosition() + vector(26.5, 1, -6.2),
    rotation = {0, 0, 0}
  })

  conservationTokenBag.takeObject({
    position = self.getPosition() + vector(20.2, 1, -6.2),
    rotation = {0, 0, 0}
  })
  conservationTokenBag.takeObject({
    position = self.getPosition() + vector(16.8, 1, -6.2),
    rotation = {0, 0, 0}
  })

  local university1 = getObjectFromGUID(UNIVERSITIES[1])
  local university2 = getObjectFromGUID(UNIVERSITIES[2])
  local university3 = getObjectFromGUID(UNIVERSITIES[3])

  u1 = university1.takeObject({
    position = associationBoard.getPosition() + vector(-7.3, 1, -1.53),
    rotation = {0, 0, 0}
  })

  u2 = university2.takeObject({
    position = associationBoard.getPosition() + vector(-5.1, 1, 1.25),
    rotation = {0, 0, 0}
  })

  u3 = university2.takeObject({
    position = associationBoard.getPosition() + vector(-8.4, 1, 1.25),
    rotation = {0, 0, 0}
  })

  state["universityGUIDs"] = {u1.getGUID(), u2.getGUID(), u3.getGUID()}

  local partnership1 = getObjectFromGUID(PARTNERSHIPS[1])
  local partnership2 = getObjectFromGUID(PARTNERSHIPS[2])
  local partnership3 = getObjectFromGUID(PARTNERSHIPS[3])
  local partnership4 = getObjectFromGUID(PARTNERSHIPS[4])
  local partnership5 = getObjectFromGUID(PARTNERSHIPS[5])

  p1 = partnership1.takeObject({
    position = associationBoard.getPosition() + vector(4.15, 1, -.5),
    rotation = {0, 0, 0}
  })

  p2 = partnership2.takeObject({
    position = associationBoard.getPosition() + vector(1.4, 1, 1.15),
    rotation = {0, 0, 0}
  })

  p3 = partnership3.takeObject({
    position = associationBoard.getPosition() + vector(-1.75, 1, 1.15),
    rotation = {0, 0, 0}
  })

  p4 = partnership4.takeObject({
    position = associationBoard.getPosition() + vector(-1.75, 1, -1.7),
    rotation = {0, 0, 0}
  })

  p5 = partnership5.takeObject({
    position = associationBoard.getPosition() + vector(1.4, 1, -1.7),
    rotation = {0, 0, 0}
  })

  state["partnershipGUIDs"] = {p1.getGUID(), p2.getGUID(), p3.getGUID(), p4.getGUID(), p5.getGUID()}

  local conservationDeck = getObjectFromGUID(CONSERVATION_DECK)
  conservationDeck.shuffle()

  conservationDeck.takeObject({
    position = associationBoard.getPosition() + vector(9.3, 1, 10.5),
    rotation = {0, 0, 0}
  })

  conservationDeck.takeObject({
    position = associationBoard.getPosition() + vector(3, 1, 10.5),
    rotation = {0, 0, 0}
  })

  conservationDeck.takeObject({
    position = associationBoard.getPosition() + vector(-3.15, 1, 10.5),
    rotation = {0, 0, 0}
  })

  if #state["turnOrder"] == 4 then
    conservationDeck.takeObject({
      position = associationBoard.getPosition() + vector(-9.3, 1, 10.5),
      rotation = {0, 0, 0}
    })
  end

  local extraMarkers = getObjectFromGUID(EXTRA_MARKERS)

  if #state["turnOrder"] == 1 then
    e1 = extraMarkers.takeObject({
      position = associationBoard.getPosition() + vector(17.9, 2, 4),
      rotation = {0, 0, 0}
    })

    e2 = extraMarkers.takeObject({
      position = associationBoard.getPosition() + vector(17.9, 2, 5),
      rotation = {0, 0, 0}
    })

    e3 = extraMarkers.takeObject({
      position = associationBoard.getPosition() + vector(17.9, 2, 6.1),
      rotation = {0, 0, 0}
    })

    e4 = extraMarkers.takeObject({
      position = associationBoard.getPosition() + vector(17.9, 2, 7.1),
      rotation = {0, 0, 0}
    })

    e5 = extraMarkers.takeObject({
      position = associationBoard.getPosition() + vector(17.9, 2, 8.15),
      rotation = {0, 0, 0}
    })

    e6 = extraMarkers.takeObject({
      position = associationBoard.getPosition() + vector(17.9, 2, 9.2),
      rotation = {0, 0, 0}
    })

    e7 = extraMarkers.takeObject({
      position = associationBoard.getPosition() + vector(17.9, 2, 10.2),
      rotation = {0, 0, 0}
    })
  elseif #state["turnOrder"] == 2 then
    extraMarkers.takeObject({
      position = associationBoard.getPosition() + vector(11.15, 1, 13.2),
      rotation = {0, 0, 0}
    })

    extraMarkers.takeObject({
      position = associationBoard.getPosition() + vector(2.95, 1, 13.2),
      rotation = {0, 0, 0}
    })

    extraMarkers.takeObject({
      position = associationBoard.getPosition() + vector(-5.15, 1, 13.2),
      rotation = {0, 0, 0}
    })

    extraMarkers.takeObject({
      position = associationBoard.getPosition() + vector(12.2, 1, -.2),
      rotation = {0, 0, 0}
    })

    extraMarkers.takeObject({
      position = associationBoard.getPosition() + vector(12.2, 1, 1.2),
      rotation = {0, 0, 0}
    })

    extraMarkers.takeObject({
      position = associationBoard.getPosition() + vector(12.2, 1, 2.4),
      rotation = {0, 0, 0}
    })
  end

  extraMarkers.destroy()

  local cardGUIDs = {}
  local projectDeck = getObjectFromGUID(PROJECT_DECK)
  projectDeck.shuffle()
  for i,z in ipairs(BOARD_CARD_ZONES) do
    local zone = getObjectFromGUID(z)
    local card = projectDeck.takeObject({
      position = zone.getPosition(),
      rotation = {0, 0, 180}
    })

    table.insert(cardGUIDs, card.getGUID())
  end

  state["cardGUIDs"] = cardGUIDs

  local objectiveDeck = getObjectFromGUID(OBJECTIVE_DECK)

  for _,c in ipairs(state["turnOrder"]) do
    local playerZone = getObjectFromGUID(PIECES[c]["zone"])

    for i=1, 8 do
      local z = projectDeck.takeObject({
        position = playerZone.getPosition(),
        rotation = {0, 0, 180}
      })
      playerZone.putObject(z)

      if i < 3 then
        local y = objectiveDeck.takeObject({
          position = playerZone.getPosition(),
          rotation = {0, 0, 180}
        })

      end

      Wait.frames(function()
        z.flip()
      end, 200)
    end
    for i=1, 2 do

    end
  end

  Wait.frames(function()
    state["gameStarted"] = true
  end, 360)
end

function onObjectLeaveScriptingZone(zone, enter_object)
  if state["numPlayers"] > 0 and state["gameStarted"] then
    local name = zone.getName()
    local card_zone = string.find(name, "Card Zone")
    local partnership_zone = string.find(name, "Partnership Zone")
    local university_zone = string.find(name, "University Zone")

    if debounceCardZones == false and card_zone ~= nil and card_zone > 0 then
      local str = string.gsub(name, "Card Zone ", "", 1)
      local zone_idx = tonumber(str)
      state["cardGUIDs"][zone_idx] = ""
    elseif partnership_zone ~= nil and partnership_zone > 0 then
        local str = string.gsub(name, "Partnership Zone ", "", 1)
        local zone_idx = tonumber(str)
        state["partnershipGUIDs"][zone_idx] = ""
    elseif university_zone ~= nil and university_zone > 0 then
      local str = string.gsub(name, "University Zone ", "", 1)
      local zone_idx = tonumber(str)
      state["universityGUIDs"][zone_idx] = ""
    end
  end
end

function onSave()
  return JSON.encode(state)
end

function onLoad(save)
  if #save > 0 then
    local s = JSON.decode(save)
    if s["numPlayers"] > 0 then
      state = s
    end
  end
end

function flipDisplay()
  for _,c in ipairs(state["cardGUIDs"]) do
    local card = getObjectFromGUID(c)
    card.flip()
  end
end

function refillDisplay()
  if debounceCardZones then
    return
  end

  local new_order = {"", "", "", "", "", ""}
  local project_deck = getObjectFromGUID(PROJECT_DECK)
  debounceCardZones = true

  local order_idx = 1
  for i, c in ipairs(state["cardGUIDs"]) do
    if c ~= "" then
      new_order[order_idx] = c
      order_idx = order_idx + 1
    end
  end

  for i,c in ipairs(new_order) do
    local zone = getObjectFromGUID(BOARD_CARD_ZONES[i])
    if c == "" then
      local card = project_deck.takeObject({
         position = zone.getPosition(),
         rotation = {0, 0, 0}
       })
       new_order[i] = card.getGUID()
     else
       local card = getObjectFromGUID(c)
       card.setPositionSmooth(zone.getPosition(), false, true)
       card.setRotation({0, 0, 0})
    end
  end

  Wait.frames(function ()
    debounceCardZones = false
    state["cardGUIDs"] = new_order
  end, 60)
end

function onPlayerTurnEnd(player_color_end, player_color_next)
  if state["numPlayers"] > 0 and state["gameStarted"] and debounceCardZones == false then
    refillDisplay()
  end
end

function breakTime()
  local mainBoard = getObjectFromGUID(MAIN_BOARD)
  local associationBoard = getObjectFromGUID(ASSOCIATION_BOARD)
  local university1 = getObjectFromGUID(UNIVERSITIES[1])
  local university2 = getObjectFromGUID(UNIVERSITIES[2])
  local university3 = getObjectFromGUID(UNIVERSITIES[3])
  local partnership1 = getObjectFromGUID(PARTNERSHIPS[1])
  local partnership2 = getObjectFromGUID(PARTNERSHIPS[2])
  local partnership3 = getObjectFromGUID(PARTNERSHIPS[3])
  local partnership4 = getObjectFromGUID(PARTNERSHIPS[4])
  local partnership5 = getObjectFromGUID(PARTNERSHIPS[5])

  local card1 = getObjectFromGUID(state["cardGUIDs"][1])
  card1.setPositionSmooth(mainBoard.getPosition() + vector(40.5, 1, 2.4), false, false)

  local card2 = getObjectFromGUID(state["cardGUIDs"][2])
  card2.setPositionSmooth(mainBoard.getPosition() + vector(40.5, 1, 2.4), false, false)

  Wait.frames(function()
    refillDisplay()
    foghorn("Don't forget to discard to hand size, discard tokens, and collect money!", {r=1,g=0,b=0})
  end
  , 240)


  for i,id in ipairs(state["partnershipGUIDs"]) do
    if id == "" then
      if i == 1 then
        p1 = partnership1.takeObject({
          position = associationBoard.getPosition() + vector(4.15, 1, -.5),
          rotation = {0, 0, 0}
        })
      elseif i == 2 then
        p2 = partnership2.takeObject({
          position = associationBoard.getPosition() + vector(1.4, 1, 1.15),
          rotation = {0, 0, 0}
        })
      elseif i == 3 then
        p3 = partnership3.takeObject({
          position = associationBoard.getPosition() + vector(-1.75, 1, 1.15),
          rotation = {0, 0, 0}
        })
      elseif i == 4 then
        p4 = partnership4.takeObject({
          position = associationBoard.getPosition() + vector(-1.75, 1, -1.7),
          rotation = {0, 0, 0}
        })
      elseif i == 5 then
        p5 = partnership5.takeObject({
          position = associationBoard.getPosition() + vector(1.4, 1, -1.7),
          rotation = {0, 0, 0}
        })
      end
    end
  end
  for i,id in ipairs(state["universityGUIDs"]) do
    if id == "" then
      if i == 1 then
        u1 = university1.takeObject({
          position = associationBoard.getPosition() + vector(-7.3, 1, -1.53),
          rotation = {0, 0, 0}
        })
      elseif i == 2 then
        u2 = university2.takeObject({
          position = associationBoard.getPosition() + vector(-5.1, 1, 1.25),
          rotation = {0, 0, 0}
        })
      elseif i == 3 then
        u3 = university2.takeObject({
          position = associationBoard.getPosition() + vector(-8.4, 1, 1.25),
          rotation = {0, 0, 0}
        })
      end
    end
  end
end

function getAppealPosition(color, index, isFirstTurn)
  local mainBoard = getObjectFromGUID(MAIN_BOARD)
  local APPEAL_POS = {
    40.3,
    38.6,
    37,
    35.45,
    33.9,
    32.15, -- 5
    30.5,
    28.95,
    27.3,
    25.7,
    24.1, -- 10
    22.4,
    20.9,
    19.3,
    17.6,
    16, -- 15
    14.5,
    12.9,
    11.25,
    9.65,
    8, -- 20
    6.4,
    4.8,
    3.2,
    1.6,
    0, -- 25
    -1.65,
    -3.3,
    -4.95,
    -6.5,
    -8.1, -- 30
    -9.7,
    -11.35,
    -12.95,
    -14.6,
    -16.25, -- 35
    -17.85,
    -19.4,
    -21.05,
    -22.7,
    -24.25, -- 40
    -25.85,
    -27.5,
    -29.2,
    -30.8,
    -32.45, -- 45
    -33.95,
    -35.55,
    -37.2,
    -38.75,
    -40.4, -- 50
    -42,
    6.3,
    4.8,
    3.2,
    1.5, -- 55
    0,
    -1.55,
    -3.2,
    -4.9,
    -6.35, -- 60
    -42,
    -40.4,
    -38.75,
    -37.2,
    -35.55, -- 65
    -33.95,
    -32.45,
    -30.8,
    -29.2,
    -27.5, -- 70
    -25.85,
    -24.25,
    -22.7,
    -21.05,
    -19.4, -- 75
    -17.85,
    -16.25,
    -14.6,
    -12.95,
    -11.35, -- 80
    -9.7,
    -8.1,
    -6.5,
    -4.95,
    -3.3, -- 85
    -1.65,
    0,
    1.6,
    3.2,
    4.8, -- 90
    6.4,
    8,
    9.65,
    11.25,
    12.9, -- 95
    14.5,
    16,
    17.6,
    19.3,
    20.9, -- 100
    22.4,
    24.1,
    25.7,
    27.3,
    28.95, -- 105
    30.5,
    32.15,
    33.9,
    35.45,
    37, -- 110
    38.6,
    40.3,
    41.9
  }

  local additional_z = 0

  if isFirstTurn == false then
    for i,c in ipairs(state["turnOrder"]) do
      if c ~= color then
        if tonumber(state["appeal"][c]) == tonumber(index) then
          additional_z = additional_z + 1
        end
      end
    end
  end

  if index <= 0 then
    state["appeal"][color] = 0
    return mainBoard.getPosition() + vector(APPEAL_POS[1], .5 + additional_z, 10)
  elseif index > 114 then
    state["appeal"][color] = 114
    return mainBoard.getPosition() + vector(APPEAL_POS[114], .5 + additional_z, -10)
  else
    state["appeal"][color] = tonumber(index)

    if index < 53 then
      return mainBoard.getPosition() + vector(APPEAL_POS[index], .5 + additional_z, 10)
    elseif index < 61 then
      return mainBoard.getPosition() + vector(-43, .5 + additional_z, APPEAL_POS[index])
    elseif index == 61 then
      return mainBoard.getPosition() + vector(-43, .5 + additional_z, APPEAL_POS[index])
    elseif index < 115 then
      return mainBoard.getPosition() + vector(APPEAL_POS[index], .5 + additional_z, -10)
    else
    end
  end
end

function getConservationPosition(color, index, isFirstTurn)
  local mainBoard = getObjectFromGUID(MAIN_BOARD)
  local CONSERVATION_POS = {
    43.8,
    41,
    37.9,
    34.5,
    31.4,
    28, -- 5
    24.7,
    21.7,
    18.4,
    15.3,
    12, -- 10
    7.8,
    3.2,
    -2,
    -6.8,
    -11.3, -- 15
    -16.1,
    -21,
    -26,
    -31,
    -35.9, -- 20
    -40.5,
    -5,
    0,
    5,
    -40.5, -- 25
    -35.9,
    -31,
    -26,
    -21,
    -16.1, -- 30
    -11.3,
    -6.8,
    -2,
    3.2,
    7.9, -- 35
    12.7,
    17.5,
    22.3,
    27.1,
    31.9,
    36.7
  }

  local additional_z = 0
  local additional_y = 0

  if isFirstTurn == false then
    for i,c in ipairs(state["turnOrder"]) do
      if c ~= color then
        if tonumber(state["conservation"][c]) == tonumber(index) then
          additional_z = additional_z + 1
        end
      end
    end
  else
    for i,c in ipairs(state["turnOrder"]) do
      if c ~= color then
        if tonumber(state["conservation"][c]) == tonumber(index) then
          additional_y = additional_y - 1
        end
      end
    end
  end

  local i = tonumber(index)

  if i == 0 and isFirstTurn then
    state["conservation"][color] = 0
    return mainBoard.getPosition() + vector(CONSERVATION_POS[1], .5 + additional_z, -8 + additional_y)
  elseif i <= 0 then
    state["conservation"][color] = 0
    return mainBoard.getPosition() + vector(CONSERVATION_POS[1], .5 + additional_z, -9)
  elseif i < 23 then
    state["conservation"][color] = i
    return mainBoard.getPosition() + vector(CONSERVATION_POS[i + 1], .5 + additional_z, -8)
  elseif i < 26 then
    state["conservation"][color] = i
    return mainBoard.getPosition() + vector(-41.2, .5 + additional_z, CONSERVATION_POS[i + 1])
  elseif i < 43 then
    state["conservation"][color] = i
    return mainBoard.getPosition() + vector(CONSERVATION_POS[i + 1], .5 + additional_z, 8.2)
  else
    state["conservation"][color] = 42
    return mainBoard.getPosition() + vector(CONSERVATION_POS[42], .5 + additional_z, 8.2)
  end
end

function getReputationPosition(color, index, isFirstTurn)
  local mainBoard = getObjectFromGUID(MAIN_BOARD)
  local REPUTATION_POS = {
    31,
    21,
    17,
    10,
    7.5, -- 5
    5,
    -1,
    -3.5,
    -7,
    -13, -- 10
    -16,
    -18.5,
    -24,
    -27,
    -30
  }

  local additional_z = 0
  local additional_x = 0

  if isFirstTurn == false then
    for i,c in ipairs(state["turnOrder"]) do
      if c ~= color then
        if tonumber(state["reputation"][c]) == tonumber(index) then
          additional_z = additional_z + 1
        end
      end
    end
  else
    for i,c in ipairs(state["turnOrder"]) do
      if c ~= color then
        if tonumber(state["reputation"][c]) == tonumber(index) then
          additional_x = additional_x + 1
        end
      end
    end
  end

  if index == 1 and isFirstTurn then
    state["reputation"][color] = 1
    return mainBoard.getPosition() + vector(REPUTATION_POS[1] + additional_x, .5, -3)
  elseif index <= 1 then
    state["reputation"][color] = 1
    return mainBoard.getPosition() + vector(REPUTATION_POS[1], .5 + additional_z, -3)
  elseif index < 16 then
    state["reputation"][color] = index
    return mainBoard.getPosition() + vector(REPUTATION_POS[index], .5 + additional_z, -3)
  else
    state["reputation"][color] = 15
    return mainBoard.getPosition() + vector(REPUTATION_POS[15], .5 + additional_z, -3)
  end
end

function addAppeal(params)
  local color = params["color"]
  local value = tonumber(params["value"])

  local curr = tonumber(state["appeal"][color])

  local mainBoard = getObjectFromGUID(MAIN_BOARD)
  local token = getObjectFromGUID(state["appeal"]["guids"][color])
  local newVal = value + curr

  if newVal ~= curr and newVal >= 0 then
    foghorn(capitalize(color).." changed appeal from "..(curr-1).." to "..max(value + curr - 1, 0))
  end

  token.setPositionSmooth(getAppealPosition(color, value + curr, false), false, false)
end

function addConservation(params)
  local color = params["color"]
  local value = tonumber(params["value"])

  local curr = tonumber(state["conservation"][color])

  local mainBoard = getObjectFromGUID(MAIN_BOARD)
  local token = getObjectFromGUID(state["conservation"]["guids"][color])
  local newVal = value + curr

  if newVal ~= curr and newVal >= 0 then
    foghorn(capitalize(color).." changed conservation from "..curr.." to "..max(value + curr, 0))
  end

  token.setPositionSmooth(getConservationPosition(color, value + curr, false), false, false)
end

function addReputation(params)
  local color = params["color"]
  local value = tonumber(params["value"])

  local curr = tonumber(state["reputation"][color])

  local mainBoard = getObjectFromGUID(MAIN_BOARD)
  local token = getObjectFromGUID(state["reputation"]["guids"][color])

  local newVal = value + curr

  if newVal ~= curr and newVal > 0 then
    foghorn(capitalize(color).." changed reputation from "..curr.." to "..max(value + curr, 1))
  end

  token.setPositionSmooth(getReputationPosition(color, value + curr, false), false, false)
end
