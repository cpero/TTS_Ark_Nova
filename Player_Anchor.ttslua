-- This file is an "object" implementation of the anchors. It should have
-- passable params and be reusable for every player anchor

require("ArkNova.Constants")
require("ArkNova.Helpers")

local DEBUG = false

local MAP_ROTATION = {"A", "O", "Misc"}
local table = getObjectFromGUID(TABLE)
local mapABag = getObjectFromGUID(GLOBE_A_MAPS)
local mapOBag = getObjectFromGUID(GLOBE_O_MAPS)
local mapMiscBag = getObjectFromGUID(GLOBE_MISC_MAPS)

local state = {
  color = "",
  mapGUID = "",
  mapIndex = 1,
  gameStarted =  false
}

function onSave()
  return JSON.encode(state)
end

function onLoad(save)
  color = self.UI.getAttribute("activeZone", "class")
  if #save > 0 then
    local s = JSON.decode(save)

    if #s["color"] > 0 then
      state = s
      if s["gameStarted"] then
        self.UI.setAttributes("mapControlLayout", { active = true })
        self.UI.setAttributes("setupLayout", { active = false })
        self.UI.setAttributes("playerZone", { active = true })
      else
        self.UI.setAttributes("mapControlLayout", { active = false })
        self.UI.setAttributes("setupLayout", { active = true })
        self.UI.setAttributes("playerZone", { active = false })

        moveMap(-1, s["mapIndex"])
      end
    end
  end

  counter = getObjectFromGUID(PLAYER_COUNTER[color]["counter"])
  add_one = getObjectFromGUID(PLAYER_COUNTER[color]["add_one"])
  add_five = getObjectFromGUID(PLAYER_COUNTER[color]["add_five"])
  add_ten = getObjectFromGUID(PLAYER_COUNTER[color]["add_ten"])
  sub_one = getObjectFromGUID(PLAYER_COUNTER[color]["sub_one"])
  sub_five = getObjectFromGUID(PLAYER_COUNTER[color]["sub_five"])
  sub_ten = getObjectFromGUID(PLAYER_COUNTER[color]["sub_ten"])
end

function initAnchor()
  local color = self.UI.getAttribute("activeZone", "class")
  state["color"] = color
  initBorder(color)

  self.UI.setAttributes("activeZone", {active = true})
  self.UI.setAttributes("setupLayout", {active = true})
  self.UI.setAttributes("setupBtn", { color = state["color"]})

  moveMap(-1, 1)

  table.call("readyPlayer", {color = state["color"], ready = false})
end

function onClickReady()
  local readyColor = self.UI.getAttribute("setupBtn", "color")
  local ready = readyColor ~= "#00ff00"

  log(color .. " is " .. ternary(ready, "", "not ") .. "ready")

  table.call("readyPlayer", {color = color, ready = ready})

  self.UI.setAttribute("setupBtn", "color", ternary(ready, "#00ff00", color))
  self.UI.setAttributes("nextBtn", {interactable = not ready})
  self.UI.setAttributes("backBtn", {interactable = not ready})
end

function initBorder(color)
  border = getObjectFromGUID(PIECES[color]["border"])
  border.setScale({19, 10, 32})
  border.setPosition(self.getPosition() + vector(0, 1.63, -28))
  border.interactable = false
  border.locked = true
  border.setColorTint(Color.fromString(color))
end

debounce_map = false

function onClickNextMap()
  if debounce_map then
    return
  end

  debounce_map = true;
  local currIndex = state["mapIndex"]
  local newIndex = currIndex + 1

  if newIndex > #MAP_ROTATION then
    newIndex = 1
  end

  moveMap(currIndex, newIndex)
end

function onClickBackMap()
  if debounce_map then
    return
  end

  debounce_map = true;
  local currIndex = state["mapIndex"]
  local newIndex = currIndex - 1

  if newIndex < 1 then
    newIndex = #MAP_ROTATION
  end

  moveMap(currIndex, newIndex)
end

function moveMap(currIndex, newIndex)
  if currIndex > 0 then
    -- Handle the existing map before spawning a new one
    local map = getObjectFromGUID(state["mapGUID"])
    self.UI.setAttributes("map" .. MAP_ROTATION[currIndex] .. "Title", { active = false })
    self.UI.setAttributes("map" .. MAP_ROTATION[currIndex] .. "Subtitle", { active = false })
    if MAP_ROTATION[currIndex] == "A" then
      map.destroy()
    elseif MAP_ROTATION[currIndex] == "O" then
      map.destroy()
    else
      map.setPositionSmooth(mapMiscBag.getPosition(), false, true)
      Wait.frames(function() mapMiscBag.putObject(map) end, 30)
    end
  end

  if MAP_ROTATION[newIndex] == "A" then
    newMap = mapABag.takeObject({position = self.getPosition() + vector(-.5, 3, -25), rotation = {0, 0, 0}})
  elseif MAP_ROTATION[newIndex] == "O" then
    newMap = mapOBag.takeObject({position = self.getPosition() + vector(-.5, 3, -25), rotation = {0, 0, 0}})
  else
    newMap = mapMiscBag.takeObject({position = self.getPosition() + vector(-.5, 3, -25), rotation = {0, 0, 0}})
  end

  newMap.locked = true
  state["mapGUID"] =  newMap.guid
  self.UI.setAttributes("map" .. MAP_ROTATION[newIndex] .. "Title", { active = true })
  self.UI.setAttributes("map" .. MAP_ROTATION[newIndex] .. "Subtitle", { active = true })
  Wait.frames(function()
    map = newMap
    debounce_map = false
    state["mapIndex"] = newIndex
  end, 120) -- Wait for the animation to finish before setting the new one so it doesn't get deleted
end

function gameInit()
  state["gameStarted"] = true

  self.UI.setAttributes("setupLayout", { active = false })
  self.UI.setAttributes("playerZone", { active = true })
  self.UI.setAttributes("mapControlLayout", { active = true })

  if state["mapIndex"] == 3 then
    map.setPositionSmooth(mapMiscBag.getPosition(), false, false)
    Wait.frames(function() mapMiscBag.putObject(map) end, 30)

    Wait.frames(function()
      mapMiscBag.shuffle()
      map = mapMiscBag.takeObject({position = self.getPosition() + vector(-.5, 3, -25), rotation = {0, 0, 0}})
    end, 120)
  end

  local counter = getObjectFromGUID(PLAYER_COUNTER[state["color"]]["counter"])
  counter.call("initCounter", {color = state["color"], score = 25})

  local playerTags = getObjectFromGUID(TAGS[state["color"]]["state"])
  playerTags.call("initPlayerTags", {color = state["color"]})

  Wait.frames(function()
    map.setPositionSmooth(map.getPosition() + vector(0, -1, -10), false, true)
    map.interactable = false
    map.locked = true

    local cardManager = getObjectFromGUID(CARD_MANAGERS[state["color"]])
    cardManager.call("initCardManager")
  end, 300)
end

function onClickAddOneAppeal()
  local mainBoard = getObjectFromGUID(MAIN_BOARD)
  mainBoard.call("addAppeal", {color = state["color"], value = "1"})
end

function onClickAddFiveAppeal()
  local mainBoard = getObjectFromGUID(MAIN_BOARD)
  mainBoard.call("addAppeal", {color = state["color"], value = "5"})
end

function onClickSubOneAppeal()
  local mainBoard = getObjectFromGUID(MAIN_BOARD)
  mainBoard.call("addAppeal", {color = state["color"], value = "-1"})
end

function onClickSubFiveAppeal()
  local mainBoard = getObjectFromGUID(MAIN_BOARD)
  mainBoard.call("addAppeal", {color = state["color"], value = "-5"})
end

function onClickAddOneConservation()
  local mainBoard = getObjectFromGUID(MAIN_BOARD)
  mainBoard.call("addConservation", {color = state["color"], value = "1"})
end

function onClickAddFiveConservation()
  local mainBoard = getObjectFromGUID(MAIN_BOARD)
  mainBoard.call("addConservation", {color = state["color"], value = "5"})
end

function onClickSubOneConservation()
  local mainBoard = getObjectFromGUID(MAIN_BOARD)
  mainBoard.call("addConservation", {color = state["color"], value = "-1"})
end

function onClickSubFiveConservation()
  local mainBoard = getObjectFromGUID(MAIN_BOARD)
  mainBoard.call("addConservation", {color = state["color"], value = "-5"})
end

function onClickAddOneReputation()
  local mainBoard = getObjectFromGUID(MAIN_BOARD)
  mainBoard.call("addReputation", {color = state["color"], value = "1"})
end

function onClickAddThreeReputation()
  local mainBoard = getObjectFromGUID(MAIN_BOARD)
  mainBoard.call("addReputation", {color = state["color"], value = "3"})
end

function onClickSubOneReputation()
  local mainBoard = getObjectFromGUID(MAIN_BOARD)
  mainBoard.call("addReputation", {color = state["color"], value = "-1"})
end

function onClickSubThreeReputation()
  local mainBoard = getObjectFromGUID(MAIN_BOARD)
  mainBoard.call("addReputation", {color = state["color"], value = "-3"})
end
