-- This file is an "object" implementation of the anchors. It should have
-- passable params and be reusable for every player anchor

require("ArkNova.Constants")
require("ArkNova.Helpers")

local DEBUG = true

local MAP_ROTATION = {"A", "O", "Misc"}

local state = {
  color = "",
  map_guid = "",
  map_index = 1
}

function onSave()
  -- return JSON.encode(state)
end

function onLoad(save)
  table = getObjectFromGUID(TABLE)
  map_a_bag = getObjectFromGUID(GLOBE_A_MAPS)
  map_o_bag = getObjectFromGUID(GLOBE_O_MAPS)
  map_misc_bag = getObjectFromGUID(GLOBE_MISC_MAPS)

  color = self.UI.getAttribute("activeZone", "class")
  state["color"] = color

  counter = getObjectFromGUID(PLAYER_COUNTER[color]["counter"])
  add_one = getObjectFromGUID(PLAYER_COUNTER[color]["add_one"])
  add_five = getObjectFromGUID(PLAYER_COUNTER[color]["add_five"])
  add_ten = getObjectFromGUID(PLAYER_COUNTER[color]["add_ten"])
  sub_one = getObjectFromGUID(PLAYER_COUNTER[color]["sub_one"])
  sub_five = getObjectFromGUID(PLAYER_COUNTER[color]["sub_five"])
  sub_ten = getObjectFromGUID(PLAYER_COUNTER[color]["sub_ten"])

  if save != "null" then
    local s = JSON.decode(save)
    if s["color"] != "" then
      state = s
    end
  end
end

function initBorder()
  border = getObjectFromGUID(PIECES[state["color"]]["border"])
  border.setScale({19, 10, 32})
  border.setPosition(self.getPosition() + vector(0, 1.63, -28))
  border.interactable = false
  border.locked = true
  border.setColorTint(Color.fromString(color))
end

function setupAnchor()
  initBorder()

  self.UI.setAttributes("activeZone", {active = true})
  self.UI.setAttributes("setupLayout", {active = true})
  self.UI.setAttributes("setupBtn", { color = state["color"]})

  map = map_a_bag.takeObject({position = self.getPosition() + vector(-.5, 3, -25), rotation = {0, 0, 0}})
  map.locked = true
  self.UI.setAttributes("map" .. MAP_ROTATION[1] .. "Title", { active = true })
  self.UI.setAttributes("map" .. MAP_ROTATION[1] .. "Subtitle", { active = true })
  state["map_index"] = 1
  state["map_guid"] = map.getGUID()

  table.call("readyPlayer", {color = state["color"], ready = false})
end

function onClickReady()
  local ready_color = self.UI.getAttribute("setupBtn", "color")
  local ready = ready_color ~= "#00ff00"

  log(color .. " is " .. ternary(ready, "", "not ") .. "ready")

  table.call("readyPlayer", {color = color, ready = ready})

  self.UI.setAttribute("setupBtn", "color", ternary(ready, "#00ff00", color))
  self.UI.setAttributes("nextBtn", {interactable = not ready})
  self.UI.setAttributes("backBtn", {interactable = not ready})
end

debounce_map = false

function onClickNextMap()
  if debounce_map then
    return
  end

  debounce_map = true;
  local curr_index = state["map_index"]
  local new_index = curr_index + 1

  if new_index > #MAP_ROTATION then
    new_index = 1
  end

  moveMap(curr_index, new_index)
end

function onClickBackMap()
  if debounce_map then
    return
  end

  debounce_map = true;
  local curr_index = state["map_index"]
  local new_index = curr_index - 1

  if new_index < 1 then
    new_index = #MAP_ROTATION
  end

  moveMap(curr_index, new_index)
end

function moveMap(curr_index, new_index)
  -- Handle the existing map before spawning a new one
  self.UI.setAttributes("map" .. MAP_ROTATION[curr_index] .. "Title", { active = false })
  self.UI.setAttributes("map" .. MAP_ROTATION[curr_index] .. "Subtitle", { active = false })
  if MAP_ROTATION[curr_index] == "A" then
    map.destroy()
  elseif MAP_ROTATION[curr_index] == "O" then
    map.destroy()
  else
    map.setPositionSmooth(map_misc_bag.getPosition(), false, true)
    Wait.frames(function() map_misc_bag.putObject(map) end, 30)
  end

  if MAP_ROTATION[new_index] == "A" then
    new_map = map_a_bag.takeObject({position = self.getPosition() + vector(-.5, 3, -25), rotation = {0, 0, 0}})
  elseif MAP_ROTATION[new_index] == "O" then
    new_map = map_o_bag.takeObject({position = self.getPosition() + vector(-.5, 3, -25), rotation = {0, 0, 0}})
  else
    new_map = map_misc_bag.takeObject({position = self.getPosition() + vector(-.5, 3, -25), rotation = {0, 0, 0}})
  end

  new_map.locked = true
  self.UI.setAttributes("map" .. MAP_ROTATION[new_index] .. "Title", { active = true })
  self.UI.setAttributes("map" .. MAP_ROTATION[new_index] .. "Subtitle", { active = true })
  Wait.frames(function()
    map = new_map
    debounce_map = false
    state["map_index"] = new_index
  end, 120) -- Wait for the animation to finish before setting the new one so it doesn't get deleted
end

function gameInit()
  self.UI.setAttributes("setupLayout", { active = false })
  self.UI.setAttributes("playerZone", { active = true })

  if state["map_index"] == 3 then
    map.setPositionSmooth(map_misc_bag.getPosition(), false, false)
    Wait.frames(function() map_misc_bag.putObject(map) end, 30)

    Wait.frames(function()
      map_misc_bag.shuffle()
      map = map_misc_bag.takeObject({position = self.getPosition() + vector(-.5, 3, -25), rotation = {0, 0, 0}})
    end, 180)
  end

  local counter = getObjectFromGUID(PLAYER_COUNTER[state["color"]]["counter"])
  counter.call("initCounter", {color = state["color"], score = 25})

  local playerTags = getObjectFromGUID(TAGS[state["color"]]["state"])
  playerTags.call("initPlayerTags", {color = state["color"]})

  Wait.frames(function()
    map.setPositionSmooth(map.getPosition() + vector(0, -1, -10), false, true)
    map.interactable = false
    map.locked = true

    local cardManager = getObjectFromGUID(CARD_MANAGERS[state["color"]])
    cardManager.call("initCardManager")
  end, 240)

  initPlayerPieces()
end

function initPlayerPieces()
end
