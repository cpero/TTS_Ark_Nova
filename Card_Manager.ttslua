require("ArkNova.Constants")
require("ArkNova.Helpers")

local state = {
  color = "",
  isInit = false,
  order = {"animals", "sponsors", "cards", "association", "build"}
}

function initCardManager()
  state["isInit"] = true

  self.UI.setAttributes("cardManager", { active = true })
  for i, card in ipairs(state["order"]) do
    local currentCard = getObjectFromGUID(ACTION_CARDS[state["color"]][card])
    currentCard.setPosition(ALL_SLOT_POS[i] + vector(0, 2, 0))
    currentCard.setRotation({0, 0, 0})
    currentCard.locked = true
    currentCard.interactable = false
  end
end

function onLoad(save)
  state["color"] = self.UI.getAttribute("cardManager", "class")
  anchor = getObjectFromGUID(ANCHORS[state["color"]])
  self.setPosition(anchor.getPosition() + vector(0, 0, -20))
  self.locked = true
  self.interactable = false

  SLOT_ONE_POS = self.getPosition() + vector(13.25, 0, -.75)
  SLOT_TWO_POS = self.getPosition() + vector(6.4, 0, -.75)
  SLOT_THREE_POS = self.getPosition() + vector(-.6, 0, -.75)
  SLOT_FOUR_POS = self.getPosition() + vector(-7.4, 0, -.75)
  SLOT_FIVE_POS = self.getPosition() + vector(-14.3, 0, -.75)

  ALL_SLOT_POS = {SLOT_ONE_POS, SLOT_TWO_POS, SLOT_THREE_POS, SLOT_FOUR_POS, SLOT_FIVE_POS}

  if #save > 0 then
    local s = JSON.decode(save)
    if s["isInit"] then
      state = s
    end
  end

  if state["isInit"] == false then
    for i, card in ipairs(state["order"]) do
      local currentCard = getObjectFromGUID(ACTION_CARDS[state["color"]][card])
      currentCard.setPosition(ALL_SLOT_POS[i] + vector(0, 0, 0))
      currentCard.setRotation({0, 0, 0})
      currentCard.locked = true
      currentCard.interactable = false
    end

    shuffleActionCards()

    self.UI.setAttributes("cardManager", { active = false })
  elseif state["isInit"] == true then
    self.UI.setAttributes("cardManager", { active = true })
    for i, card in ipairs(state["order"]) do
      local currentCard = getObjectFromGUID(ACTION_CARDS[state["color"]][card])
      currentCard.setPosition(ALL_SLOT_POS[i] + vector(0, 2, 0))
      currentCard.setRotation({0, 0, 0})
      currentCard.locked = true
      currentCard.interactable = false
    end
  end
end

function onSave()
  return JSON.encode(state)
end

function onSlotOneBackClick()
  handleBackClick(1)
end

function onSlotOnePlayClick()
  handlePlayClick(1)
end

function onSlotOneNextClick()
  handleNextClick(1)
end

function onSlotTwoBackClick()
  handleBackClick(2)
end

function onSlotTwoPlayClick()
  handlePlayClick(2)
end

function onSlotTwoNextClick()
  handleNextClick(2)
end

function onSlotThreeBackClick()
  handleBackClick(3)
end

function onSlotThreePlayClick()
  handlePlayClick(3)
end

function onSlotThreeNextClick()
  handleNextClick(3)
end

function onSlotFourBackClick()
  handleBackClick(4)
end

function onSlotFourPlayClick()
  handlePlayClick(4)
end

function onSlotFourNextClick()
  handleNextClick(4)
end

function onSlotFiveBackClick()
  handleBackClick(5)
end

function onSlotFivePlayClick()
  handlePlayClick(5)
end

function onSlotFiveNextClick()
  handleNextClick(5)
end

function handlePlayClick(cardNum)
  local color = state["color"]
  broadcastToAll(capitalize(color).." has played "..string.upper(state["order"][cardNum]).." at strength "..cardNum.."!")
  local this_card = state["order"][cardNum]

  local this_card_obj = getObjectFromGUID(ACTION_CARDS[state["color"]][this_card])
  this_card_obj.setPosition(this_card_obj.getPosition() + vector(0, 0, 10))
  newOrder = state["order"]
  for i=cardNum, 1, -1 do
    if i > 1 then
      local card_before = state["order"][i-1]
      local card_before_obj = getObjectFromGUID(ACTION_CARDS[state["color"]][state["order"][i-1]])
      newOrder[i] = card_before

      Wait.frames(function()
        card_before_obj.setPositionSmooth(ALL_SLOT_POS[i] + vector(0, 2, 0), false, false)
      end, 30)
    else
      newOrder[i] = this_card
      Wait.frames(function()
        this_card_obj.setPositionSmooth(ALL_SLOT_POS[i] + vector(0, 2, 0), false, false)
      end, 60)
    end

    state["order"] = newOrder
  end
end

function handleBackClick(cardNum)
  local color = state["color"]

  broadcastToAll(capitalize(color).." is moving "..string.upper(state["order"][cardNum]).." to strength 1!")
  local this_card = state["order"][cardNum]

  local this_card_obj = getObjectFromGUID(ACTION_CARDS[state["color"]][this_card])
  this_card_obj.setPosition(this_card_obj.getPosition() + vector(0, 0, 10))
  newOrder = state["order"]
  for i=cardNum, 1, -1 do
    if i > 1 then
      local card_before = state["order"][i-1]
      local card_before_obj = getObjectFromGUID(ACTION_CARDS[state["color"]][state["order"][i-1]])
      newOrder[i] = card_before

      Wait.frames(function()
        card_before_obj.setPositionSmooth(ALL_SLOT_POS[i] + vector(0, 2, 0), false, false)
      end, 30)
    else
      newOrder[1] = this_card
      Wait.frames(function()
        this_card_obj.setPositionSmooth(ALL_SLOT_POS[1] + vector(0, 2, 0), false, false)
      end, 60)
    end

    state["order"] = newOrder
  end
end

function handleNextClick(cardNum)
  local color = state["color"]

  broadcastToAll(capitalize(color).." is moving "..string.upper(state["order"][cardNum]).." to strength 5!")
  local this_card = state["order"][cardNum]

  local this_card_obj = getObjectFromGUID(ACTION_CARDS[state["color"]][this_card])
  this_card_obj.setPosition(this_card_obj.getPosition() + vector(0, 0, 10))
  newOrder = state["order"]

  for i=cardNum, 5, 1 do
    if i < 5 then
      local card_before = state["order"][i+1]
      local card_before_obj = getObjectFromGUID(ACTION_CARDS[state["color"]][state["order"][i+1]])
      newOrder[i] = card_before

      Wait.frames(function()
        card_before_obj.setPositionSmooth(ALL_SLOT_POS[i] + vector(0, 2, 0), false, false)
      end, 30)
    else
      newOrder[5] = this_card
      Wait.frames(function()
        this_card_obj.setPositionSmooth(ALL_SLOT_POS[5] + vector(0, 2, 0), false, false)
      end, 60)
    end

    state["order"] = newOrder
  end
end

function shuffleActionCards()
  local new_order = shuffle(state["order"])
  for i = #new_order, 2, -1 do
    if new_order[i] == "animals" then
      new_order[1], new_order[i] = new_order[i], new_order[1]
      break
    end
  end
  state["order"] = new_order
end
